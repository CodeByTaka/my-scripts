// 免責事項：このスクリプトは非公式ツールであり、iBowの開発元とは関係ありません。自己責任で使用してください。スクリプトの動作や結果について、作者は一切の責任を負いません。
(async function(){const wait=ms=>new Promise(res=>setTimeout(res,ms));const log=msg=>console.log("[MyScript] "+msg);const input=prompt("JSONを入力してください：");let data;try{data=JSON.parse(input)}catch(e){alert("JSONのパースに失敗しました");return}if(!data?.id){alert("IDが含まれていません");return}const searchInput=document.querySelector('input[placeholder*="検索"]')||document.querySelector('input[id^="input-"]');if(searchInput){searchInput.focus();searchInput.value=data.id;searchInput.dispatchEvent(new Event("input",{bubbles:true}));searchInput.click();await wait(1000);const items=document.querySelectorAll(".v-menu__content .v-list-item");for(let item of items){if(!item.textContent.includes("利用者一覧")&&item.textContent.trim().length>1){item.click();log("利用者を選択しました");break}}await wait(3000)}const tabs=document.querySelectorAll("a, button");for(let tab of tabs){if(tab.textContent.includes("看護記録")){tab.click();log("看護記録タブをクリック");break}}await wait(1500);const newBtns=document.querySelectorAll("button, a");for(let btn of newBtns){if(btn.textContent.includes("新しく作成")){btn.click();log("新しく作成をクリック");break}}await wait(1500);const panels=document.querySelectorAll(".v-expansion-panel");const targets=["基本情報","GAF尺度","本日の状態","観察項目","症状報告","看護内容"];for(let title of targets){for(let panel of panels){if(panel.textContent.includes(title)){if(panel.__vue__)panel.__vue__.isActive=true;const header=panel.querySelector(".v-expansion-panel-header");if(header)header.click()}}}await wait(1000);const subPanels=document.querySelectorAll(".v-expansion-panel");const subTargets=["iBow基本","リハビリ"];for(let title of subTargets){for(let panel of subPanels){if(panel.textContent.includes(title)){if(panel.__vue__)panel.__vue__.isActive=true;const header=panel.querySelector(".v-expansion-panel-header");if(header)header.click()}}}await wait(1000);log("基本情報入力開始");const dateInput=document.querySelector("#basic-info-visit-start-datetime");if(dateInput){dateInput.click();await wait(800);const match=Array.from(document.querySelectorAll(".v-date-picker-table button .v-btn__content")).find(b=>b.textContent.trim()===`${data.day}日`);if(match){match.parentElement.click();await wait(500);log(`${data.day}日を選択しました`)}else{log("❌ 日付が見つかりませんでした")}}const setTime=(id,value)=>{const el=document.querySelector(`input#${id}`);if(el){el.focus();el.value=value;el.dispatchEvent(new Event("input",{bubbles:true}));log(`${id} に ${value} を入力`)}else{log(`未検出: ${id}`)}};setTime("basic-info-visit-start-datetime-start-hh",data["start-hh"]);setTime("basic-info-visit-start-datetime-start-mm",data["start-mm"]);setTime("basic-info-visit-start-datetime-end-hh",data["end-hh"]);setTime("basic-info-visit-start-datetime-end-mm",data["end-mm"]);await wait(300);const staffHidden=document.querySelector('input[type="hidden"][id*="staff"]');if(staffHidden&&data["staff-id"]){staffHidden.value=data["staff-id"];staffHidden.dispatchEvent(new Event("change",{bubbles:true}))}const staffSelect=document.querySelector("div[id*='staff']");if(staffSelect&&staffSelect.__vue__&&data["staff-id"]){staffSelect.__vue__.$emit("input",parseInt(data["staff-id"],10));log(`Vueコンポーネントにstaff-id「${data["staff-id"]}」をemit`)}const serviceSlot=document.querySelector("#basic-info-service-time .v-input__slot");if(serviceSlot){serviceSlot.click();await wait(1000);const items=document.querySelectorAll(".v-menu__content .v-list-item");for(let item of items){const text=item.textContent;if(text.includes("訪問I5(40分)")||text.includes("医療保険訪問")){item.click();log(`提供時間区分「${text.trim()}」を選択`);break}}}log("✅ 基本情報パネル入力 完了");await wait(500);log("バイタルサイン入力 開始");if(data["temp-integer"]){const trigger=document.querySelector("#first-vital-temp-integer [role='button']");if(trigger){trigger.click();await wait(250);const match=Array.from(document.querySelectorAll(".v-list-item__title")).find(el=>el.textContent.trim()===data["temp-integer"].toString());if(match){match.closest("[role='option']").click();log("体温（整数）を選択しました")}}}if(data["temp-decimal"]){const trigger=document.querySelector("#first-vital-temp-decimal [role='button']");if(trigger){trigger.click();await wait(250);const match=Array.from(document.querySelectorAll(".v-list-item__title")).find(el=>el.textContent.trim()===data["temp-decimal"].toString());if(match){match.closest("[role='option']").click();log("体温（小数）を選択しました")}}}const directVitalInputs=["pulse","spo2","weight","bp-high-right","bp-low-right","bp-high-left","bp-low-left"];for(let key of directVitalInputs){if(data[key]){const el=document.querySelector(`#first-vital-${key} input`);if(el){el.focus();await wait(50);el.value=data[key];el.dispatchEvent(new Event("input",{bubbles:true}));el.dispatchEvent(new Event("change",{bubbles:true}));el.blur();log(`${key} に ${data[key]} を入力`)}else{log(`未検出: first-vital-${key}`)}}}log("✅ バイタル入力 完了");log("症状報告 入力開始");log("対象データ:",data["condition-status"],data["condition-comment"]);if(data["condition-status"]){const triggerInput=document.querySelector('#condition-condition-div');if(triggerInput){const triggerSlot=triggerInput.querySelector('.v-input__slot');if(triggerSlot){triggerSlot.click();await wait(1500);const menus=document.querySelectorAll('.v-menu__content');let targetMenu=null;for(let i=0;i<menus.length;i++){if(menus[i].offsetParent!==null){targetMenu=menus[i];break}}if(targetMenu){const items=targetMenu.querySelectorAll('.v-list-item');log(`症状選択肢数: ${items.length}`);let found=false;for(let j=0;j<items.length;j++){const optText=items[j].textContent.trim();log(`選択肢${j}: ${optText}`);if(optText.includes(data["condition-status"])){items[j].click();log(`ステータス「${data["condition-status"]}」を選択しました`);found=true;break}}if(!found){log("❌ ステータス選択肢が見つかりませんでした");const availableOptions=Array.from(items).map(item=>item.textContent.trim());log("利用可能な選択肢:",availableOptions)}}else{log("❌ ドロップダウンメニューが表示されていません")}}}}if(data["condition-comment"]){await wait(1000);const textarea=document.querySelector("#condition-condition");if(textarea){textarea.focus();textarea.click();textarea.value="";await wait(100);textarea.value=data["condition-comment"];textarea.dispatchEvent(new Event("input",{bubbles:true}));textarea.dispatchEvent(new Event("change",{bubbles:true}));textarea.dispatchEvent(new Event("blur",{bubbles:true}));if(textarea.__vue__)textarea.__vue__.$emit("input",data["condition-comment"]);log("コメントを入力しました")}else{log("❌ コメント欄が見つかりませんでした")}}log("✅ 症状報告 入力完了");await wait(500);log("看護内容チェック 処理開始");if(data.check){const itemsToCheck=data.check.split(',').map(item=>item.trim());log(`チェック対象: ${itemsToCheck.length}項目`);let checkedCount=0;let notFoundItems=[];for(let item of itemsToCheck){log(`「${item}」を検索中...`);const labels=Array.from(document.querySelectorAll('label'));const targetLabel=labels.find(label=>label.textContent.trim()===item||label.textContent.includes(item));if(targetLabel){const containerId=targetLabel.getAttribute('for');const containerElement=document.querySelector(`#${containerId}`);if(containerElement){const inputElement=containerElement.querySelector('input[type="checkbox"]');if(inputElement){const isChecked=inputElement.getAttribute('aria-checked')==='true';if(!isChecked){inputElement.click();await wait(100);checkedCount++;log(`✓ 「${item}」をチェックしました`)}else{log(`「${item}」は既にチェック済み`)}}else{log(`[!] 「${item}」のinput要素が見つかりません`);notFoundItems.push(item)}}else{log(`[!] 「${item}」のコンテナが見つかりません`);notFoundItems.push(item)}}else{log(`[!] 「${item}」のラベルが見つかりません`);notFoundItems.push(item)}}if(notFoundItems.length>0){log(`${notFoundItems.length}項目が見つからないため、自由記載欄に追記します`);const textarea=document.querySelector('#condition-value');if(textarea){const currentValue=textarea.value||'';const newItems=notFoundItems.join('、');const newValue=currentValue?`${currentValue}、${newItems}`:newItems;textarea.focus();await wait(100);textarea.value=newValue;textarea.dispatchEvent(new Event("input",{bubbles:true}));textarea.dispatchEvent(new Event("change",{bubbles:true}));if(textarea.__vue__){textarea.__vue__.$emit("input",newValue)}textarea.blur();log(`自由記載欄に${notFoundItems.length}項目を追記しました`)}else{log("エラー: 自由記載欄が見つかりません")}}log(`✅ 看護内容チェック 処理完了 (チェック済み: ${checkedCount}項目, 自由記載: ${notFoundItems.length}項目)`)}else{log("checkデータがありません - スキップします")}await wait(500);log("GAF尺度の評価 処理開始");let gafInput=document.querySelector('#gaf-local-gaf-score');if(!gafInput){const label=Array.from(document.querySelectorAll('label')).find(el=>el.textContent.includes('GAF評価点'));if(label){gafInput=document.querySelector(`#${label.getAttribute('for')}`);log("テキスト検索で要素を発見")}else{log("ID検索で要素を発見")}}if(gafInput){let currentValue="";if(gafInput.__vue__&&gafInput.__vue__.value!==undefined){currentValue=gafInput.__vue__.value.toString().trim();log(`Vue値を取得: "${currentValue}"`)}else{currentValue=(gafInput.value||"").trim();log(`DOM値を取得: "${currentValue}"`)}if(!currentValue||!/^\d{1,3}$/.test(currentValue)||parseInt(currentValue)>100){gafInput.focus();await wait(100);gafInput.value="40";gafInput.dispatchEvent(new Event("input",{bubbles:true}));gafInput.dispatchEvent(new Event("change",{bubbles:true}));if(gafInput.__vue__){gafInput.__vue__.$emit("input","40")}gafInput.blur();log("GAF評価点に40を設定しました")}else{log(`既存の値「${currentValue}」をそのまま使用`)}}else{log("GAFパネルが見つかりません - スキップします")}log("✅ GAF尺度の評価 処理完了");await wait(500);log("観察項目 処理開始");let needsManualObservation=false;let switchElement=document.querySelector('#observations-inner-copy-recent-evaluation-adl');if(!switchElement){const label=Array.from(document.querySelectorAll('label')).find(el=>el.textContent.includes('前回評価を参照'));if(label){switchElement=label.closest('.app-switch');log("テキスト検索で要素を発見")}else{log("ID検索で要素を発見")}}if(switchElement){const input=switchElement.querySelector('input[type="checkbox"]');if(input){input.click();log("「前回評価を参照」をONにしました")}else{log("input要素が見つかりません")}}else{log("「前回評価を参照」が見つかりません - 手動入力が必要");needsManualObservation=true}log("✅ 観察項目 処理完了");await wait(500);log("全処理完了 - アラート表示");let alertMessage="✅ 自動入力が完了しました";if(needsManualObservation){alertMessage+="\n\n⚠️ 観察項目の手動入力が必要です"}alert(alertMessage);log("✅ 全処理完了")})();